package gui;

import java.awt.EventQueue;

import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

import clases.Bungalow;
import controlador.bungalowControlador;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class FrmBungalow extends JInternalFrame implements ActionListener {

	/**
	 * 
	 */
	private bungalowControlador c = new bungalowControlador();
	private static final long serialVersionUID = 1L;
	private JTextField txtNumero;
	private JTable table;
	private JComboBox<String> cboCategoria;
	private JComboBox<String> cboEstado;
	private JTextField txtPrecio;
	private JButton btnAdicionar;
	private JButton btnConsultar;
	private JButton btnModificar;
	private JButton btnEliminar;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					FrmBungalow frame = new FrmBungalow();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public FrmBungalow() {
		setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
		setIconifiable(true);
		setClosable(true);
		setVisible(false);
		setTitle("Mantenimiento Bungalow");
		setSize(650, 450);
		setFrameIcon(new ImageIcon(FrmSocio.class.getResource("/imagenes/mantenimiento.jpg")));
		getContentPane().setLayout(null);
		
		JLabel lblNmero = new JLabel("N\u00FAmero:");
		lblNmero.setBounds(34, 36, 81, 14);
		getContentPane().add(lblNmero);
		
		JLabel lblEstado = new JLabel("Estado: ");
		lblEstado.setBounds(34, 75, 81, 14);
		getContentPane().add(lblEstado);
		
		cboEstado = new JComboBox<String>();
		cboEstado.setModel(new DefaultComboBoxModel<String>(new String[] {"0", "1"}));
		cboEstado.setBounds(125, 72, 96, 20);
		getContentPane().add(cboEstado);
		
		txtNumero = new JTextField();
		txtNumero.setBounds(125, 33, 96, 20);
		getContentPane().add(txtNumero);
		txtNumero.setColumns(10);
		
		JButton btnGrabar = new JButton("Grabar");
		btnGrabar.setBounds(259, 32, 89, 23);
		getContentPane().add(btnGrabar);
		
		btnAdicionar = new JButton("Adicionar");
		btnAdicionar.addActionListener(this);
		btnAdicionar.setBounds(484, 32, 89, 23);
		getContentPane().add(btnAdicionar);
		
		btnConsultar = new JButton("Consultar");
		btnConsultar.addActionListener(this);
		btnConsultar.setBounds(484, 71, 89, 23);
		getContentPane().add(btnConsultar);
		
		btnModificar = new JButton("Modificar");
		btnModificar.addActionListener(this);
		btnModificar.setBounds(484, 105, 89, 23);
		getContentPane().add(btnModificar);
		
		btnEliminar = new JButton("Eliminar");
		btnEliminar.addActionListener(this);
		btnEliminar.setBounds(484, 139, 89, 23);
		getContentPane().add(btnEliminar);
		
		JLabel lblCatergora = new JLabel("Catergor\u00EDa:");
		lblCatergora.setBounds(34, 109, 81, 14);
		getContentPane().add(lblCatergora);
		
		 cboCategoria = new JComboBox<String>();
		cboCategoria.setModel(new DefaultComboBoxModel<String>(new String[] {"categoria 1 ", "categoria 2", "categoria 3"}));
		cboCategoria.setBounds(125, 106, 96, 20);
		getContentPane().add(cboCategoria);
		
		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(34, 184, 567, 225);
		getContentPane().add(scrollPane);
		
		table = new JTable();
		table.setModel(new DefaultTableModel(
			new Object[][] {
			},
			new String[] {
				"N\u00FAmero", "Estado", "Categoria", "Precio"
			}
		));
		scrollPane.setViewportView(table);
		
		JLabel lblPrecio = new JLabel("Precio:");
		lblPrecio.setBounds(31, 143, 48, 14);
		getContentPane().add(lblPrecio);
		
		txtPrecio = new JTextField();
		txtPrecio.setBounds(125, 140, 96, 20);
		getContentPane().add(txtPrecio);
		txtPrecio.setColumns(10);
		
	}
	// métodos del matenimiento
			void listar() {
				//Limpia la tabla de la GUI
				DefaultTableModel dtm = (DefaultTableModel) table.getModel();
				dtm.setRowCount(0);

				for (int i = 0; i < c.tamaño(); i++) {
					Bungalow x =c.obtener(i);
					Object[] f = { x.getNumeroBungalow(), x.getCategoria(),x.getPrecioPorDia(), x.getEstado()};
					dtm.addRow(f);
				}
			}

			void adicionar() {
				String cod = txtNumero.getText().trim();
				String est  = String.valueOf(cboEstado.getSelectedItem());
				String cat = String.valueOf(cboCategoria.getSelectedItem());
				String pre = txtPrecio.getText().trim();

				// No existe
				if (c.buscarPorCodigo(Integer.parseInt(cod)) == null) {
					Bungalow obj = new Bungalow();
					obj.setNumeroBungalow(Integer.parseInt(cod));
					obj.setEstado(Integer.parseInt(est));
					obj.setCategoria(Integer.parseInt(cat));
					obj.setPrecioPorDia(Double.parseDouble(pre));
					c.agregar(obj);
					c.grabarData();
					listar();
					mensaje("Se agregó correctamente");
					limpiarCajas();
				} else {// Si existe un vehiculo con esa placa
					mensaje("Ya existe producto con código :" + cod);
				}

			}

			void buscar() {
				int fila = table.getSelectedRow();
				if (fila == -1) {
					mensaje("Seleccione una fila");
				} else {
					//Se obtiene valores de la celda
					int cod = (Integer) table.getValueAt(fila, 0);
					int est = (Integer) table.getValueAt(fila, 1);
					int cat = (Integer) table.getValueAt(fila, 3);
					double pre = (Double) table.getValueAt(fila, 2);

					txtNumero.setText(String.valueOf(cod));
					cboEstado.setSelectedItem(est);
					cboCategoria.setSelectedItem(cat);
					txtPrecio.setText(String.valueOf(pre));
				}
			}

			void eliminar() {
				int cod = Integer.parseInt(txtNumero.getText().trim());

				// NO EXISTE auto con esa placa
				if (c.buscarPorCodigo(cod) == null) {
					mensaje("No existe producto con codigo " + cod);
				} else {// SI EXISTE auto con esa placa
					c.eliminaPorCodigo(cod);
					c.grabarData();
					listar();
					limpiarCajas();
				}
			}

			void actualizar() {
				String cod = txtNumero.getText().trim();
				String est  = String.valueOf(cboEstado.getSelectedItem());
				String cat = String.valueOf(cboCategoria.getSelectedItem());
				String pre = txtPrecio.getText().trim();

				// No existe
				if (c.buscarPorCodigo(Integer.parseInt(cod)) == null) {
					mensaje("No existe producto con código :" + cod);
				} else {
					Bungalow obj = new Bungalow();
					obj.setNumeroBungalow(Integer.parseInt(cod));
					obj.setEstado(Integer.parseInt(est));
					obj.setCategoria(Integer.parseInt(cat));
					obj.setPrecioPorDia(Integer.parseInt(pre));
					c.actualizar(obj);
					c.grabarData();
					listar();
					mensaje("Se acutalizó correctamente");
				}
			}

			void limpiarCajas() {
				txtNumero.setText("");
				cboEstado.setSelectedItem(0);
				txtPrecio.setText("");
				//txtStock.setText("");
			}

			void mensaje(String msg) {
				JOptionPane.showMessageDialog(this, msg);
			}
	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == btnEliminar) {
			handleBtnEliminarActionPerformed(e);
		}
		if (e.getSource() == btnModificar) {
			handleBtnModificarActionPerformed(e);
		}
		if (e.getSource() == btnConsultar) {
			handleBtnConsultarActionPerformed(e);
		}
		if (e.getSource() == btnAdicionar) {
			handleBtnAdicionarActionPerformed(e);
		}
	}
	protected void handleBtnAdicionarActionPerformed(ActionEvent e) {
		
	}
	protected void handleBtnConsultarActionPerformed(ActionEvent e) {
	}
	protected void handleBtnModificarActionPerformed(ActionEvent e) {
	}
	protected void handleBtnEliminarActionPerformed(ActionEvent e) {
	}
}
